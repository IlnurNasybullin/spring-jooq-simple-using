plugins {
    id 'java'
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'nu.studer.jooq' version '4.1'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework:spring-jdbc:5.2.8.RELEASE'
    implementation 'org.jooq:jooq:3.12.3'
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '3.4.2'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.14'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    jooqRuntime 'org.postgresql:postgresql:42.2.14'
}

def dbprops = new Properties()
file("src/main/resources/application.properties").withInputStream {dbprops.load(it)}

ext {
    jooq = '3.12.3'
    postgresql = '42.2.14'
    dbDriver = "org.postgresql.Driver"
    dbUrl = dbprops.getProperty("hikaricp.database.config.jdbcUrl")
    dbUsername = dbprops.getProperty("hikaricp.database.config.username")
    dbPassword = dbprops.getProperty("hikaricp.database.config.password")
}

jooq {
    version = '3.12.3'
    edition = 'OSS'
    joogConfig(sourceSets.main) {
        logging = 'TRACE'
        jdbc {
            driver = dbDriver
            url = dbUrl
            user = dbUsername
            password = dbPassword

        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                includes = 'public.*'
                forcedTypes {
                    forcedType {
                        expression = '.*_data_json$'
                        types = '.*'
                        userType = 'com.fasterxml.jackson.databind.JsonNode'
                        converter = 'ru.tenet.data.util.PostgresJsonbJacksonBinding'
                    }
                }
            }
            generate {
                relations = false
                deprecated = false
                records = true
                pojos = true
                fluentSetters = false
                daos = false
                routines = true
                tables = true
                indexes = false
                keys = false
                sequences = false
                pojosEqualsAndHashCode = false
            }
            target {
                packageName = 'org.example.jooq'
                directory = 'src/main/java'
            }
        }
    }
}

test {
    useJUnitPlatform()
}